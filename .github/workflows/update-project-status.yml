name: Update Project Status on Push

on:
  push:
    branches:
      - '*-*' # ex) 51-issue-name

jobs:
  update_project_status:
    runs-on: ubuntu-latest
    steps:
      - name: Extract issue number from branch name
        id: extract_issue
        run: |
          BRANCH_NAME=${GITHUB_REF#refs/heads/}
          ISSUE_NUMBER=$(echo "$BRANCH_NAME" | grep -oE '^[0-9]+')
          if [ -z "$ISSUE_NUMBER" ]; then
            echo "Error: No issue number found in branch name."
            exit 1
          fi
          echo "::set-output name=issue_number::$ISSUE_NUMBER"
          echo "Extracted issue number: $ISSUE_NUMBER"

      - name: Move issue to "진행중" column
        uses: actions/github-script@v6
        with:
          script: |
            const { graphql } = require("@octokit/graphql");

            const issueNumber = process.env.ISSUE_NUMBER;
            const projectName = "umbrella";
            const targetStatus = "진행중";

            try {
              const response = await graphql(
                `
                query($owner: String!, $repo: String!, $issueNumber: Int!) {
                  repository(owner: $owner, name: $repo) {
                    issue(number: $issueNumber) {
                      id
                    }
                  }
                }
                `,
                {
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issueNumber: parseInt(issueNumber),
                  headers: {
                    authorization: `token ${process.env.GITHUB_TOKEN}`,
                  },
                }
              );

              const issueId = response.repository.issue.id;
              if (!issueId) throw new Error(`Issue #${issueNumber} not found.`);

              // 새로운 Projects API에 맞게 카드 상태 업데이트
              await graphql(
                `
                mutation($issueId: ID!, $status: String!) {
                  updateIssue(input: { id: $issueId, status: $status }) {
                    issue {
                      id
                      status
                    }
                  }
                }
                `,
                {
                  issueId: issueId,
                  status: targetStatus,
                  headers: {
                    authorization: `token ${process.env.GITHUB_TOKEN}`,
                  },
                }
              );

              console.log(`Moved issue #${issueNumber} to "${targetStatus}" status.`);
            } catch (error) {
              console.error("Error:", error);
              throw error;
            }
        env:
          ISSUE_NUMBER: ${{ steps.extract_issue.outputs.issue_number }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
