name: Update Project Status on Push

on:
  push:
    branches:
      - '*-*' # ex) 51-issue-name

jobs:
  update_project_status:
    runs-on: ubuntu-latest
    steps:
      - name: Extract issue number from branch name
        id: extract_issue
        run: |
          BRANCH_NAME=${GITHUB_REF#refs/heads/}
          ISSUE_NUMBER=$(echo "$BRANCH_NAME" | grep -oE '^[0-9]+')
          if [ -z "$ISSUE_NUMBER" ]; then
            echo "Error: No issue number found in branch name."
            exit 1
          fi
          echo "::set-output name=issue_number::$ISSUE_NUMBER"
          echo "Extracted issue number: $ISSUE_NUMBER"

      - name: Move issue to "In Progress" column
        uses: actions/github-script@v6
        with:
          script: |
            const issueNumber = process.env.ISSUE_NUMBER;
            const projectName = "umbrella";
            const sourceColumnName = "할 일";
            const targetColumnName = "진행중";

            try {
              // 1. 이슈 정보 가져오기
              const issue = await github.rest.issues.get({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issueNumber,
              });

              // 2. 프로젝트(umbrella) 찾기
              const projects = await github.rest.projects.listForRepo({
                owner: context.repo.owner,
                repo: context.repo.repo,
              });
              const project = projects.data.find(p => p.name === projectName);

              if (!project) throw new Error(`Project '${projectName}' not found.`);

              // 3. 프로젝트의 모든 컬럼 가져오기
              const columns = await github.rest.projects.listColumns({
                project_id: project.id,
              });

              // 4. sourceColumnName 컬럼에서 이슈 카드 찾기
              const todoColumn = columns.data.find(c => c.name === sourceColumnName);
              if (!todoColumn) throw new Error(`Column ${sourceColumnName} not found.`);

              const todoCards = await github.rest.projects.listCards({
                column_id: todoColumn.id,
              });

              const targetCard = todoCards.data.find(card => 
                card.content_url?.endsWith(`/issues/${issueNumber}`)
              );

              if (!targetCard) throw new Error(`Issue #${issueNumber} not found in ${sourceColumnName} column.`);

              // 5. targetColumnName 컬럼으로 이동
              const inProgressColumn = columns.data.find(c => c.name === targetColumnName);
              if (!inProgressColumn) throw new Error(`Column "${targetColumnName}" not found.`);

              await github.rest.projects.moveCard({
                card_id: targetCard.id,
                position: "top",
                column_id: inProgressColumn.id,
              });

              console.log(`Moved issue #${issueNumber} to "${targetColumnName}" column.`);
            } catch (error) {
              console.error("Error:", error);
              throw error; // Fail the step on error
            }
        env:
          ISSUE_NUMBER: ${{ steps.extract_issue.outputs.issue_number }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
